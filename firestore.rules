rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Temporarily allow specific email as admin for testing
      // TODO: Set proper custom claims via Firebase Admin SDK
      return isSignedIn() && (
             request.auth.token.role == 'admin' ||
             request.auth.token.email == 'smunley13@gmail.com'
      );
    }

    function getUserEmail() {
      return request.auth.token.email;
    }

    function isTeamOwner(teamId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/teams/$(teamId)) &&
             getUserEmail() in get(/databases/$(database)/documents/teams/$(teamId)).data.owners;
    }

    function isRosterOwner(leagueId, teamId) {
      return isTeamOwner(teamId);
    }

    function isRosterLocked(leagueId, teamId) {
      let roster = get(/databases/$(database)/documents/rosters/$(leagueId + '_' + teamId));
      return roster.data.status == 'adminLocked';
    }

    function isLeagueMember(leagueId) {
      // Check if user owns any team in this league
      return isSignedIn() && (
        isAdmin() ||
        exists(/databases/$(database)/documents/teams/$(request.auth.uid))
      );
    }

    // Leagues collection
    match /leagues/{leagueId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Teams collection
    match /teams/{teamId} {
      // Allow reading if signed in (query filtering happens client-side)
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Players collection
    match /players/{playerId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Only admins can modify player data
    }

    // Projected Stats collection
    match /projectedStats/{fantraxId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Previous Season Stats collection
    match /previousStats/{fantraxId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Rosters collection
    match /rosters/{rosterId} {
      // rosterId format: {leagueId}_{teamId}
      // Allow all signed-in users to read rosters (they can view any team's roster)
      allow read: if isSignedIn();

      allow create: if isSignedIn() && (
        isTeamOwner(request.resource.data.teamId) ||
        isAdmin()
      );

      allow update: if isSignedIn() && (
        // Owners can update their own roster if not locked
        (isTeamOwner(resource.data.teamId) &&
         resource.data.status != 'adminLocked') ||
        // Admins can always update
        isAdmin()
      );

      allow delete: if isAdmin();
    }

    // User profiles (optional for future use)
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Watchlists collection
    match /watchlists/{watchlistId} {
      // Users can read their own watchlists
      allow read: if isSignedIn() && resource.data.userId == getUserEmail();
      // Users can create/update their own watchlists
      allow create, update: if isSignedIn() && request.resource.data.userId == getUserEmail();
      // Users can delete their own watchlists
      allow delete: if isSignedIn() && resource.data.userId == getUserEmail();
    }
  }
}
